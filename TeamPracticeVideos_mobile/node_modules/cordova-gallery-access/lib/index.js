'use strict';

var permissionsChecker = require('./permissions-checker.js');

/**
 * Loads the most recent items from the Camera Roll
 * @param  {Number} [count=5]
 *         Maxmimum number of returned items
 * @return {Promise}
 *         Promise that will return all items once it resolves
 */
var load = function load() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    _ref$count = _ref.count,
	    count = _ref$count === undefined ? 5 : _ref$count;

	if (!window.galleryAPI) {
		throw new Error('Gallery API is not available. Add https://github.com/SuryaL/cordova-gallery-api.git to your config.xml.');
	}

	return permissionsChecker.ensurePermission(permissionsChecker.Permission.GET_ALBUMS).then(function () {
		return getAlbums();
	}).then(function (albums) {
		var album = _findCameraRollAlbum(albums);

		return getMedia(album);
	}).then(function (items) {
		// Limit number of items for which the data is looked up (because
		// it's expensive)
		var limitedItems = items.slice(0, count);

		// Enrich items with their thumbnail
		var promises = limitedItems.map(function (item) {
			return getMediaThumbnail(item);
		});

		return Promise.all(promises);
	});
};

/**
 * Finds in the list of available albums the one pointing to the device camera:
 * - iOS: type is "PHAssetCollectionSubtypeSmartAlbumUserLibrary"
 * - Android: title is "Camera"
 * @param  {Array} albums List of all available albums
 * @return {Object}       Album representing the Camera Roll
 */
var _findCameraRollAlbum = function _findCameraRollAlbum(albums) {
	var isCameraRollAlbum = albums.find(function (album) {
		return album.type === 'PHAssetCollectionSubtypeSmartAlbumUserLibrary';
	});
	if (isCameraRollAlbum) {
		return isCameraRollAlbum;
	}

	var androidCameraRollAlbum = albums.find(function (album) {
		return album.title === 'Camera';
	});
	if (androidCameraRollAlbum) {
		return androidCameraRollAlbum;
	}

	throw new Error('Can\'t find Camera Roll album. Available albums: ' + JSON.stringify(albums));
};
var getAlbums = function getAlbums() {
	return new Promise(function (resolve, reject) {
		window.galleryAPI.getAlbums(function (albums) {
			return resolve(albums);
		}, function (e) {
			return reject('Failed to get albums: ' + e);
		});
	});
};
var getMedia = function getMedia(album) {
	return new Promise(function (resolve, reject) {
		window.galleryAPI.getMedia(album, function (items) {
			return resolve(items);
		}, function (e) {
			return reject('Failed to load items for album ' + album.id + ': ' + e);
		});
	});
};
var getMediaThumbnail = function getMediaThumbnail(item) {
	return new Promise(function (resolve, reject) {
		window.galleryAPI.getMediaThumbnail(item, function (enrichedItem) {
			return resolve(enrichedItem);
		}, function (e) {
			return reject('Failed to load thumbnail for item ' + item.id + ': ' + e);
		});
	});
};

/**
 * Gets the filepath to the high quality version of the mediaitem
 * @param  {Object} item Media item for which the HQ version should be looked up
 * @return {String}      Path to the HQ version of the mediaitem
 */
var getHQImageData = function getHQImageData(item) {
	return new Promise(function (resolve, reject) {
		window.galleryAPI.getHQImageData(item, function (hqFilePath) {
			return resolve('file://' + hqFilePath);
		}, function (e) {
			return reject('Failed to load HQ image data for item ' + item.id + ': ' + e);
		});
	});
};

/**
 * Gets a reference to a local file
 * @param  {String} filePath Path of the to be loaded file
 * @return {Object}
 */
var getFile = function getFile(filePath) {
	return resolveLocalFileSystemURL(filePath).then(function (fileEntry) {
		return enrichFile(fileEntry);
	});
};
/**
 * Resolve the fileEntry for a path
 * @param  {String} filePath Path
 * @return {FileEntry}       Resolved fileEntry
 */
var resolveLocalFileSystemURL = function resolveLocalFileSystemURL(filePath) {
	return new Promise(function (resolve, reject) {
		window.resolveLocalFileSystemURL(filePath, function (fileEntry) {
			return resolve(fileEntry);
		}, function (e) {
			return reject('Failed to resolve URL for path ' + filePath + ': ' + JSON.stringify(e));
		});
	});
};
/**
 * Enriches the file entry with size and type by resolving the file entry
 * @param  {FileEntry} fileEntry File entry to be resolved
 * @return {FileEntry}           File entry with the size and type field
 */
var enrichFile = function enrichFile(fileEntry) {
	return new Promise(function (resolve, reject) {
		fileEntry.file(function (file) {
			fileEntry.name = file.name;
			fileEntry.size = file.size;
			fileEntry.type = file.type;
			resolve(fileEntry);
		}, function (e) {
			return reject('Failed to resolve file entry ' + fileEntry + ': ' + JSON.stringify(e));
		});
	});
};

/**
 * Checks if all required libaries are available to load galley items. Use this
 * check to verify if the app runs in a Cordova environment.
 * @return {Boolean} True if items can be loaded from the gallery
 */
var isSupported = function isSupported() {
	return Boolean(window.galleryAPI);
};

module.exports = {
	load: load,
	getHQImageData: getHQImageData,
	getFile: getFile,
	isSupported: isSupported,

	// Visible for testing
	_findCameraRollAlbum: _findCameraRollAlbum
};